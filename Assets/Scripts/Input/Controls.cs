//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0693da98-dcd1-4bec-938a-62c4186c2a5e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cccaad87-f5ec-4475-a949-697a46ee35ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""26301c06-014c-4a23-bbc4-cc79b7002ba4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8a92b9d4-5566-4be9-925a-1f3e21bf6478"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9c99cc8e-347b-4d89-8213-e3939f21c7d5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""981bf732-1b45-48e8-b88f-18979fd293ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d001e24-0aea-4e4a-b3c5-77a0a037f876"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Dialog"",
            ""id"": ""28288e77-1f21-4453-baf8-b734e9bbf9ce"",
            ""actions"": [
                {
                    ""name"": ""Buy Land"",
                    ""type"": ""Button"",
                    ""id"": ""2002c4ea-e9c2-47cb-9d7b-b312b5b55b58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""uiControls"",
                    ""type"": ""Button"",
                    ""id"": ""5ff3f479-fcff-4c17-995f-29e768fc46a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""openDialog"",
                    ""type"": ""Button"",
                    ""id"": ""381f0935-059c-4e90-8c75-945dc1587499"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""enterKey"",
                    ""type"": ""Button"",
                    ""id"": ""184decfa-4df2-43f7-8692-e78020a521b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackKey"",
                    ""type"": ""Button"",
                    ""id"": ""d059cd9d-7a5f-4079-8e79-00587e9965fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e357ec0-8355-4bea-99b6-176ab731bd12"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Buy Land"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""moveThroughUI"",
                    ""id"": ""765095be-96ae-48e2-a147-45e9ad047cef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""uiControls"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7ec2eb5e-1474-4532-a1e8-d62f3a32af13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""uiControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fcbc6370-5194-4092-b907-44e8a7b58654"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""uiControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""54d4f5b4-5d89-46a8-8648-2bc102246d5b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""uiControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fc988451-5e51-4977-ac6d-0a98d5572fe7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""uiControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9d2d9e1a-d015-40dc-a00d-a1782d1ec8dd"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""openDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f82c667e-5d2a-435e-868d-ca1c0f2e8841"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""enterKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f52d917d-b86d-47be-8022-6328280a102c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        // Dialog
        m_Dialog = asset.FindActionMap("Dialog", throwIfNotFound: true);
        m_Dialog_BuyLand = m_Dialog.FindAction("Buy Land", throwIfNotFound: true);
        m_Dialog_uiControls = m_Dialog.FindAction("uiControls", throwIfNotFound: true);
        m_Dialog_openDialog = m_Dialog.FindAction("openDialog", throwIfNotFound: true);
        m_Dialog_enterKey = m_Dialog.FindAction("enterKey", throwIfNotFound: true);
        m_Dialog_BackKey = m_Dialog.FindAction("BackKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Dialog
    private readonly InputActionMap m_Dialog;
    private List<IDialogActions> m_DialogActionsCallbackInterfaces = new List<IDialogActions>();
    private readonly InputAction m_Dialog_BuyLand;
    private readonly InputAction m_Dialog_uiControls;
    private readonly InputAction m_Dialog_openDialog;
    private readonly InputAction m_Dialog_enterKey;
    private readonly InputAction m_Dialog_BackKey;
    public struct DialogActions
    {
        private @Controls m_Wrapper;
        public DialogActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BuyLand => m_Wrapper.m_Dialog_BuyLand;
        public InputAction @uiControls => m_Wrapper.m_Dialog_uiControls;
        public InputAction @openDialog => m_Wrapper.m_Dialog_openDialog;
        public InputAction @enterKey => m_Wrapper.m_Dialog_enterKey;
        public InputAction @BackKey => m_Wrapper.m_Dialog_BackKey;
        public InputActionMap Get() { return m_Wrapper.m_Dialog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogActions set) { return set.Get(); }
        public void AddCallbacks(IDialogActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogActionsCallbackInterfaces.Add(instance);
            @BuyLand.started += instance.OnBuyLand;
            @BuyLand.performed += instance.OnBuyLand;
            @BuyLand.canceled += instance.OnBuyLand;
            @uiControls.started += instance.OnUiControls;
            @uiControls.performed += instance.OnUiControls;
            @uiControls.canceled += instance.OnUiControls;
            @openDialog.started += instance.OnOpenDialog;
            @openDialog.performed += instance.OnOpenDialog;
            @openDialog.canceled += instance.OnOpenDialog;
            @enterKey.started += instance.OnEnterKey;
            @enterKey.performed += instance.OnEnterKey;
            @enterKey.canceled += instance.OnEnterKey;
            @BackKey.started += instance.OnBackKey;
            @BackKey.performed += instance.OnBackKey;
            @BackKey.canceled += instance.OnBackKey;
        }

        private void UnregisterCallbacks(IDialogActions instance)
        {
            @BuyLand.started -= instance.OnBuyLand;
            @BuyLand.performed -= instance.OnBuyLand;
            @BuyLand.canceled -= instance.OnBuyLand;
            @uiControls.started -= instance.OnUiControls;
            @uiControls.performed -= instance.OnUiControls;
            @uiControls.canceled -= instance.OnUiControls;
            @openDialog.started -= instance.OnOpenDialog;
            @openDialog.performed -= instance.OnOpenDialog;
            @openDialog.canceled -= instance.OnOpenDialog;
            @enterKey.started -= instance.OnEnterKey;
            @enterKey.performed -= instance.OnEnterKey;
            @enterKey.canceled -= instance.OnEnterKey;
            @BackKey.started -= instance.OnBackKey;
            @BackKey.performed -= instance.OnBackKey;
            @BackKey.canceled -= instance.OnBackKey;
        }

        public void RemoveCallbacks(IDialogActions instance)
        {
            if (m_Wrapper.m_DialogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogActions @Dialog => new DialogActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IDialogActions
    {
        void OnBuyLand(InputAction.CallbackContext context);
        void OnUiControls(InputAction.CallbackContext context);
        void OnOpenDialog(InputAction.CallbackContext context);
        void OnEnterKey(InputAction.CallbackContext context);
        void OnBackKey(InputAction.CallbackContext context);
    }
}
